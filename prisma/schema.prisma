datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt
  image         String?
  role          UserRole  @default(Client)

  provider Provider?

  accounts Account[]
  sessions Session[]
}

model Provider {
  userId          String                @unique
  image           ProviderProfileImage?
  specialty       String
  meetingDuration Int?

  schedule     Schedule?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@index([userId])
}

model ProviderProfileImage {
  id     String @id @default(cuid())
  key    String
  url    String
  userId String @unique

  provider Provider @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model Appointment {
  id          String  @id @default(cuid())
  patientName String
  reason      String?
  slotId      String
  providerId  String

  timeSlot TimeSlot @relation(fields: [slotId], references: [id])
  provider Provider @relation(fields: [providerId], references: [userId], onDelete: Cascade)

  @@index([slotId])
  @@index([providerId])
  @@map("appointments")
}

model Schedule {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt
  providerId String?  @unique

  selectedDays SelectedDay[]

  provider Provider? @relation(fields: [providerId], references: [userId], onDelete: Cascade)

  @@index([providerId])
  @@map("schedule")
}

model SelectedDay {
  id         String  @id @default(cuid())
  day        WeekDay
  scheduleId String

  timeSlots TimeSlot[]

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([day, scheduleId])
  @@index([scheduleId])
}

model TimeSlot {
  id            String @id @default(cuid())
  startTime     String
  endTime       String
  selectedDayId String

  selectedDay SelectedDay   @relation(fields: [selectedDayId], references: [id], onDelete: Cascade)
  Appointment Appointment[]

  @@index([selectedDayId])
}

enum WeekDay {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserRole {
  Admin
  Provider
  Client
}
